 /***************************************************************************
                           servidor.c  -  description
                              -------------------
     begin                : Wed Apr 6 2005
     copyright            : (C) 2005 by
     email                :
  ***************************************************************************/

 /***************************************************************************
  *                                                                         *
  *   This program is free software; you can redistribute it and/or modify  *
  *   it under the terms of the GNU General Public License as published by  *
  *   the Free Software Foundation; either version 2 of the License, or     *
  *   (at your option) any later version.                                   *
  *                                                                         *
  ***************************************************************************/

 #include <linpal.h>
 #include <stdio.h>
 #include "packets.h"
 #define lpc_send pppoes_send.payload.information
 #define lpc_rec pppoes_rec.payload.information

   int OK;
   int recibido;
   unsigned short int indice=2;
   unsigned short int indice2=0;
   unsigned short int indice3=0;
   unsigned char broadd[6];
   unsigned short bytesEnviados=0;
   unsigned char nombreac[]="kokkonia";



   unsigned char finDesc=-1;
   unsigned char finLCP=-1;
 	

   char selec[MAX_NAME_LENGTH]="eth1";
   unsigned short int protocolo;
   unsigned short int ppp_protocol;


   //unsigned short session_id[10];
   unsigned char lpc_identifier=0;
   struct ADAPTER Adapter;
   struct CLIENTE clientes[10];
   struct ETHERNET_FRAME frame_send;
   struct ETHERNET_FRAME frame_rec;
   struct PPPoES_PACKET pppoes_rec;
   struct PPPoES_PACKET pppoes_send;
   struct PPPoED_PACKET pppoed_rec;
   struct PPPoED_PACKET pppoed_send;
   struct OPTION mru;
   struct NCP_COMPRESSION IPCompressProto;
	
   void enviar_PADO(void);
   void enviar_PADS(void);
   void enviar_confreq_LCP(void);
   void recibir_confreq(void);
   void enviar_confack_LCP(void);
   void recibir_confack(void);
   int buscarIdentifier(unsigned short);
   void enviar_confreq_NCP(void);
   void enviar_confack_NCP(void);
   int buscarDirDest(void);

    int main (void) {
   
      broadd[0]=255;
      broadd[1]=255;
      broadd[2]=255;
      broadd[3]=255;
      broadd[4]=255;
      broadd[5]=255;     
          	
   
      memset(&Adapter,0,sizeof(struct ADAPTER));  //rellenad a 0 Adapter antes de empezar a trabajar con él
      memset(clientes,0,sizeof(clientes));
    	
    //Abrir el adaptador
      if ((NepalOpenAdapter(selec, &Adapter))==-1){
         printNep2Error("Error al abrir el adaptador");
         return -1;
      }
   
      if ((NepalSetFilter(&Adapter, NULL, OR_DIRECTED_BROADCAST))== False){
         printNep2Error("Error NepalSetFilter");
         exit(1);
      }
   
    // INICIO DE LA FASE DE DESCUBRIMIENTO
   
       
      while(1){
         memset(&frame_rec,0,sizeof(frame_rec));
         memset(&lpc_rec,0,sizeof(lpc_rec));
       //comprobar que realmente es un paquete de tipo PADI, si no lo es volver a recibir otro paquete
         if(NepalReadPacket(&Adapter, &frame_rec, 0) > 0){
         
            memcpy(&protocolo, &(frame_rec.Protocol[0]),2);
            protocolo=ntohs(protocolo);
             //printf("protocolo %d\n",*(frame_rec.Protocol));
            if(protocolo == 0x8863){
            
               if((memcmp(&(frame_rec.DestinationAddress),broadd ,6)==0) || (memcmp(&(frame_rec.DestinationAddress),&(Adapter.CurrentAddress),6)==0)){
               
                  memcpy(&pppoed_rec, &(frame_rec.Data[0]), sizeof(pppoed_rec));
                  if(pppoed_rec.code== 0x09){
                  
                     enviar_PADO();
                  }
                  else if(pppoed_rec.code == 0x19 && memcmp(pppoed_rec.acname.ac_name,nombreac,sizeof(pppoed_rec.acname.ac_name))==0){
                     printf("indice buscando dir %d\n", buscarDirDest());
                     if(buscarDirDest()>-1 && clientes[indice3].estado==0){
                        enviar_PADS();
                        finDesc=1;
                        clientes[indice3].estado=1;
                     }
                  }
               }
            }
         
          //FASE LCP
            if(protocolo == 0x8864){
               if((memcmp(&(frame_rec.DestinationAddress), "ff:ff:ff:ff:ff:ff",6)==0) || (memcmp(&(frame_rec.DestinationAddress),&(Adapter.CurrentAddress),6)==0)){
                  memcpy(&pppoes_rec, &(frame_rec.Data[0]), sizeof(pppoes_rec));
                  memcpy(&ppp_protocol, &(pppoes_rec.payload.protocol[0]),2);
                  ppp_protocol=ntohs(ppp_protocol);
                  if(pppoes_rec.code==0x00 && ppp_protocol==0xc021 && buscarIdentifier(pppoes_rec.session_id)>-1 && finDesc){
                     if(lpc_rec.code==0x1 && clientes[indice2].estado==1 ){
                        clientes[indice2].estado=2;
                        lpc_identifier=lpc_rec.identifier;
                        enviar_confreq_LCP();
                     }
                     else if( lpc_rec.code==0x2 && clientes[indice2].estado==2){
                        clientes[indice2].estado=3;
                        enviar_confack_LCP();
                        finLCP=1;
                     }
                  }
                  
                   //FASE NCP
                  else if(pppoes_rec.code==0x00 && ppp_protocol==0x8021 && buscarIdentifier(pppoes_rec.session_id)>-1&& finLCP){
                     if(lpc_rec.code==0x1 && clientes[indice2].estado==3){
                        clientes[indice2].estado=4;
                        enviar_confreq_NCP();
                     }
                     else if( lpc_rec.code==0x2 && clientes[indice2].estado==4) {
                        clientes[indice2].estado=5;
                        enviar_confack_NCP();
                     }
                  }
               
               }
            }
         
         
         
         
         }
      }
   
   
   
    // Cerramos el adaptador
      NepalCloseAdapter(&Adapter);
      printf("esto es todo\n");
      return 0;
   }

    void enviar_PADO(void){
    //Envio de un paquete de tipo PADO
      indice=indice+1;
      if(indice<10){
      
         pppoed_send.ver_type = VER_TYPE;
         pppoed_send.code = 0x07;
         
         pppoed_send.eol.type[0]=0x00;
         pppoed_send.eol.type[1]=0x00;
         pppoed_send.eol.length=0;
      
              
         pppoed_send.serviceName.type[0]=0x01;
         pppoed_send.serviceName.type[1]=0x01;
         pppoed_send.eol.length=0;  // Ponemos la longitud a 0, que indica que cualquier servicio es aceptable
      
      	
         pppoed_send.acname.type=ntohs(0x0102);
         pppoed_send.acname.length=ntohs(8);
         memcpy(pppoed_send.acname.ac_name, nombreac,sizeof(pppoed_send.acname.ac_name));
      
         pppoed_send.session_id=clientes[indice].session_id;
      
         pppoed_send.length = ntohs(sizeof(pppoed_send.eol)+sizeof(pppoed_send.acname)+sizeof(pppoed_send.serviceName));
      
      
         memcpy(frame_send.DestinationAddress,frame_rec.SourceAddress,ETHERNET_ADDRESS_LENGTH);
         memcpy(clientes[indice].DireccionDest,frame_rec.SourceAddress,ETHERNET_ADDRESS_LENGTH);
      
         memcpy(frame_send.SourceAddress,Adapter.CurrentAddress,ETHERNET_ADDRESS_LENGTH);
         memcpy(frame_send.Data, &pppoed_send, sizeof(pppoed_send));
      
         frame_send.Protocol[0]=0x88;
         frame_send.Protocol[1]=0x63;
         
         if((ETHERNET_HEADER_LENGTH + sizeof(pppoed_send))>=60)
            bytesEnviados=ETHERNET_HEADER_LENGTH + sizeof(pppoed_send);
         else
            bytesEnviados=60;
            
      /* Enviar un paquete de tipo PADO al host*/
         OK = NepalSendPacket(&Adapter, &frame_send,bytesEnviados);
         if (OK==-1){
            printNep2Error("Error al enviar un paquete PADO");
            exit(1);
         }
      }
      else{
         printNep2Error("Error: el servidor no puede atender a mas de 10 clientes");
         exit(1);
      }
   }


    void enviar_PADS(void){
    /* Enviar un paquete de tipo PADS al servidor elegido */
      if(indice<10){
      
         clientes[indice3].session_id=(short)random();
         memcpy(frame_send.DestinationAddress,clientes[indice3].DireccionDest,ETHERNET_ADDRESS_LENGTH);
         pppoed_send.ver_type = VER_TYPE;
         pppoed_send.code = 0x65;
         pppoed_send.session_id=clientes[indice3].session_id;
         
         pppoed_send.length = ntohs(sizeof(pppoed_send.eol)+sizeof(pppoed_send.acname)+sizeof(pppoed_send.serviceName));
      
         memcpy(frame_send.DestinationAddress,frame_rec.SourceAddress,ETHERNET_ADDRESS_LENGTH);
         memcpy(frame_send.SourceAddress,Adapter.CurrentAddress,ETHERNET_ADDRESS_LENGTH);
         memcpy(frame_send.Data, &pppoed_send, sizeof(pppoed_send));
      
         if((ETHERNET_HEADER_LENGTH + sizeof(pppoed_send))>=60)
            bytesEnviados=ETHERNET_HEADER_LENGTH + sizeof(pppoed_send);
         else
            bytesEnviados=60;
      
      
         OK = NepalSendPacket(&Adapter, &frame_send, bytesEnviados);
         if (OK==-1){
            printNep2Error("Error al enviar un paquete PADS");
            exit(1);
         }
      }
      else{
         printNep2Error("Error: el servidor no puede atender a mas de 10 clientes");
         exit(1);
      }
   }

 	
    void enviar_confreq_LCP(void){
      pppoes_send.ver_type = VER_TYPE;
      pppoes_send.session_id=clientes[indice2].session_id;
      pppoes_send.code=0x00;
      pppoes_send.payload.protocol[0]=0xc0;
      pppoes_send.payload.protocol[1]=0x21;
      lpc_send.code=0x1;
      lpc_send.identifier=lpc_identifier;
   
      memcpy(frame_send.DestinationAddress,frame_rec.SourceAddress,ETHERNET_ADDRESS_LENGTH);
   
      memcpy(&mru, frame_rec.Data+sizeof(pppoes_rec), sizeof(mru));
      lpc_send.length = ntohs(sizeof(lpc_send)+sizeof(mru));
      pppoes_send.length = ntohs(sizeof(pppoes_send.payload)+sizeof(mru));
   
      memcpy(frame_send.Data, &pppoes_send, sizeof(pppoes_send));
      memcpy(frame_send.Data+sizeof(pppoes_send), &mru, sizeof(mru));
   
   
       
      frame_send.Protocol[0]=0x88;
      frame_send.Protocol[1]=0x64;
      
      if((ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(mru))>=60)
         bytesEnviados=ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(mru);
      else
         bytesEnviados=60;
   
   
      OK = NepalSendPacket(&Adapter, &frame_send, bytesEnviados);
      if (OK==-1){
         printNep2Error("Error al enviar un paquete confreq");
         exit(1);
      }
   
   }



    void enviar_confack_LCP(void){
      pppoes_send.ver_type = VER_TYPE;
      pppoes_send.session_id=clientes[indice2].session_id;
      pppoes_send.code=0x00;
      pppoes_send.payload.protocol[0]=0xc0;
      pppoes_send.payload.protocol[1]=0x21;
      lpc_send.code=0x2;
      lpc_send.identifier=lpc_identifier;
      
      memcpy(frame_send.DestinationAddress,frame_rec.SourceAddress,ETHERNET_ADDRESS_LENGTH);
   
      memcpy(&mru, frame_rec.Data+sizeof(pppoes_rec), sizeof(mru));
      lpc_send.length = ntohs(sizeof(lpc_send)+sizeof(mru));
      pppoes_send.length = ntohs(sizeof(pppoes_send.payload)+sizeof(mru));
   
      memcpy(frame_send.Data, &pppoes_send, sizeof(pppoes_send));
      memcpy(frame_send.Data+sizeof(pppoes_send), &mru, sizeof(mru));
   
   	 
      if((ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(mru))>=60)
         bytesEnviados=ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(mru);
      else
         bytesEnviados=60;
   
   
      OK = NepalSendPacket(&Adapter, &frame_send, ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(mru));
      if (OK==-1){
         printNep2Error("Error al enviar un paquete PADI");
         exit(1);
      }
   }


    void enviar_confreq_NCP(void){
      pppoes_send.ver_type = VER_TYPE;
      pppoes_send.session_id=clientes[indice2].session_id;
      pppoes_send.code=0x00;
      pppoes_send.payload.protocol[0]=0x80;
      pppoes_send.payload.protocol[1]=0x21;
      lpc_send.code=0x1;
      lpc_send.identifier=lpc_identifier;
      
      memcpy(&IPCompressProto, frame_rec.Data+sizeof(pppoes_rec), sizeof(IPCompressProto));
   
      memcpy(frame_send.DestinationAddress,frame_rec.SourceAddress,ETHERNET_ADDRESS_LENGTH);
                  
      lpc_send.length = ntohs(sizeof(lpc_send)+sizeof(IPCompressProto));
      pppoes_send.length = ntohs(sizeof(pppoes_send.payload)+sizeof(IPCompressProto));
   
      memcpy(frame_send.Data, &pppoes_send, sizeof(pppoes_send));
      memcpy(frame_send.Data+sizeof(pppoes_send), &IPCompressProto, sizeof(IPCompressProto));
   
   
       
      frame_send.Protocol[0]=0x88;
      frame_send.Protocol[1]=0x64;
      
      if((ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(IPCompressProto))>=60)
         bytesEnviados=ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(IPCompressProto);
      else
         bytesEnviados=60;
   
   
      OK = NepalSendPacket(&Adapter, &frame_send, ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(IPCompressProto));
      if (OK==-1){
         printNep2Error("Error al enviar un paquete confreq");
         exit(1);
      }
   
   }

 	
    void enviar_confack_NCP(void){

/*      int i=0;
      for(i=0;i<10;i++){
         printf("session id %x\n",clientes[i].DireccionDest[5] );
      }   */
      pppoes_send.ver_type = VER_TYPE;
      pppoes_send.session_id=clientes[indice2].session_id;
      pppoes_send.code=0x00;
      pppoes_send.payload.protocol[0]=0x80;
      pppoes_send.payload.protocol[1]=0x21;
      lpc_send.code=0x2;
      lpc_send.identifier=lpc_identifier;
       
   
      memcpy(frame_send.DestinationAddress,frame_rec.SourceAddress,ETHERNET_ADDRESS_LENGTH);
      memcpy(&IPCompressProto, frame_rec.Data+sizeof(pppoes_rec), sizeof(IPCompressProto));
   
      
      lpc_send.length = ntohs(sizeof(lpc_send)+sizeof(IPCompressProto));
      pppoes_send.length = ntohs(sizeof(pppoes_send.payload)+sizeof(IPCompressProto));
   
      memcpy(frame_send.Data, &pppoes_send, sizeof(pppoes_send));
      memcpy(frame_send.Data+sizeof(pppoes_send), &IPCompressProto, sizeof(IPCompressProto));
      
      if((ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(IPCompressProto))>=60)
         bytesEnviados=ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(IPCompressProto);
      else
         bytesEnviados=60;
      
      OK = NepalSendPacket(&Adapter, &frame_send, ETHERNET_HEADER_LENGTH+sizeof(pppoes_send)+sizeof(IPCompressProto));
      if (OK==-1){
         printNep2Error("Error al enviar un paquete PADI");
         exit(1);
      }
   }

    int buscarIdentifier(unsigned short iden){
   
      indice2=0;
      while((indice2<10)&&((clientes[indice2].session_id)!=iden)){
         indice2=indice2+1;
      
      }
   
      if (indice2<10)
         return indice2;
      
      else
         return -1;
   
   
   }

    int buscarDirDest(void){
   
      indice3=0;
      while((indice3<10)&&(memcmp(&(clientes[indice3].DireccionDest),&(frame_rec.SourceAddress),sizeof(frame_rec.SourceAddress))!=0)){
         indice3=indice3+1;
      }
   
      if (indice3<10)
         return indice3;
      
      else
         return -1;
   
   
   }

